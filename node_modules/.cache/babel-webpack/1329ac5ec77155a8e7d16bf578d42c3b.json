{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/crisl/OneDrive/Escritorio/web/Personal/hugos-projects/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { registerLocaleData } from '@angular/common';\nimport { filter, map, startWith } from 'rxjs/operators';\nexport class DynamicLocaleId extends String {\n  constructor(translate) {\n    var _this;\n\n    super('');\n    _this = this;\n    this.translate = translate;\n    const langs = [...this.translate.langs];\n    this._localeLoaded = (this.translate.langs || []).reduce((acc, lang) => Object.assign(Object.assign({}, acc), {\n      [lang]: false\n    }), {});\n    this.translate.onLangChange.pipe(map(({\n      lang\n    }) => lang), startWith(this.translate.currentLang), filter(Boolean)).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (lang) {\n        if ((langs || []).includes(lang)) {\n          langs.splice(langs.indexOf(lang), 1);\n          const angularLocale = yield _this.loadLocale(lang);\n          registerLocaleData(angularLocale.default);\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  loadLocale(lang) {\n    switch (lang) {\n      case 'es':\n        return import(`@angular/common/locales/es`);\n\n      case 'en':\n        return import(`@angular/common/locales/en`);\n\n      default:\n        return Promise.reject('Locale not supported');\n    }\n  }\n\n  isLocaleLoaded(lang) {\n    return this._localeLoaded[lang];\n  }\n\n  toString() {\n    return this.translate.currentLang;\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\crisl\\OneDrive\\Escritorio\\web\\Personal\\hugos-projects\\src\\app\\core\\i18n\\utils\\dynamic-locale-id.class.ts"],"names":[],"mappings":";AAAA,SAAS,kBAAT,QAAmC,iBAAnC;AAEA,SAAS,MAAT,EAAiB,GAAjB,EAAsB,SAAtB,QAAuC,gBAAvC;AAEA,OAAM,MAAO,eAAP,SAA+B,MAA/B,CAAqC;AAGzC,EAAA,WAAA,CAAsB,SAAtB,EAAiD;AAAA;;AAE/C,UAAM,EAAN,CAF+C;AAAA;AAA3B,SAAA,SAAA,GAAA,SAAA;AAGpB,UAAM,KAAK,GAAG,CAAC,GAAG,KAAK,SAAL,CAAe,KAAnB,CAAd;AACA,SAAK,aAAL,GAAqB,CAAC,KAAK,SAAL,CAAe,KAAf,IAAuB,EAAxB,EAA4B,MAA5B,CAAmC,CAAC,GAAD,EAAM,IAAN,KAAe,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,GAAN,CAAA,EAAS;AAAE,OAAC,IAAD,GAAQ;AAAV,KAAT,CAAlD,EAA+E,EAA/E,CAArB;AAEA,SAAK,SAAL,CAAe,YAAf,CAA4B,IAA5B,CACE,GAAG,CAAC,CAAC;AAAE,MAAA;AAAF,KAAD,KAAc,IAAf,CADL,EAEE,SAAS,CAAC,KAAK,SAAL,CAAe,WAAhB,CAFX,EAGE,MAAM,CAAC,OAAD,CAHR,EAIE,SAJF;AAAA,mCAIY,WAAO,IAAP,EAAoB;AAC9B,YAAI,CAAC,KAAK,IAAI,EAAV,EAAc,QAAd,CAAuB,IAAvB,CAAJ,EAAkC;AAChC,UAAA,KAAK,CAAC,MAAN,CAAa,KAAK,CAAC,OAAN,CAAc,IAAd,CAAb,EAAkC,CAAlC;AACA,gBAAM,aAAa,SAAS,KAAI,CAAC,UAAL,CAAgB,IAAhB,CAA5B;AACA,UAAA,kBAAkB,CAAC,aAAa,CAAC,OAAf,CAAlB;AACD;AACF,OAVD;;AAAA;AAAA;AAAA;AAAA;AAYD;;AAEO,EAAA,UAAU,CAAC,IAAD,EAAa;AAC7B,YAAQ,IAAR;AACE,WAAK,IAAL;AACE,eAAO,OAAO,4BAAP,CAAP;;AACF,WAAK,IAAL;AACE,eAAO,OAAO,4BAAP,CAAP;;AACF;AACE,eAAO,OAAO,CAAC,MAAR,CAAe,sBAAf,CAAP;AANJ;AAQD;;AAED,EAAA,cAAc,CAAC,IAAD,EAAa;AACzB,WAAO,KAAK,aAAL,CAAmB,IAAnB,CAAP;AACD;;AAED,EAAA,QAAQ,GAAA;AACN,WAAO,KAAK,SAAL,CAAe,WAAtB;AACD;;AAxCwC","sourcesContent":["import { registerLocaleData } from '@angular/common';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { filter, map, startWith } from 'rxjs/operators';\r\n\r\nexport class DynamicLocaleId extends String {\r\n  private _localeLoaded:any;\r\n\r\n  constructor(protected translate: TranslateService) {\r\n\r\n    super('');\r\n    const langs = [...this.translate.langs];\r\n    this._localeLoaded = (this.translate.langs ||[]).reduce((acc, lang) => ({ ...acc, [lang]: false }), {});\r\n\r\n    this.translate.onLangChange.pipe(\r\n      map(({ lang }) => lang),\r\n      startWith(this.translate.currentLang),\r\n      filter(Boolean)\r\n    ).subscribe(async (lang: any) => {\r\n      if ((langs || []).includes(lang)) {\r\n        langs.splice(langs.indexOf(lang), 1);\r\n        const angularLocale = await this.loadLocale(lang);\r\n        registerLocaleData(angularLocale.default);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  private loadLocale(lang: string): Promise<any> {\r\n    switch (lang) {\r\n      case 'es':\r\n        return import(`@angular/common/locales/es`);\r\n      case 'en':\r\n        return import(`@angular/common/locales/en`);\r\n      default:\r\n        return Promise.reject('Locale not supported');\r\n    }\r\n  }\r\n\r\n  isLocaleLoaded(lang: string): boolean {\r\n    return this._localeLoaded[lang];\r\n  }\r\n\r\n  toString() {\r\n    return this.translate.currentLang;\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}